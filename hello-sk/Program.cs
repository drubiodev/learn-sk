using Microsoft.Extensions.Configuration;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Connectors.OpenAI;

var builder = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
            .AddJsonFile("local.appsettings.json", optional: true, reloadOnChange: true);

IConfigurationRoot configuration = builder.Build();

Console.WriteLine("Hello SK!");
Console.WriteLine("Summarize:");

var userInput = Console.ReadLine();

// create kernel with chat completion
var kernel = Kernel.CreateBuilder()
    .AddAzureOpenAIChatCompletion(configuration["MODEL_AI"], configuration["ENDPOINT"], configuration["API_KEY"])
    .Build();

var prompt = "Summarize the following text: {{$input}}";

var skFunction = kernel.CreateFunctionFromPrompt(prompt, new OpenAIPromptExecutionSettings
{
    MaxTokens = 100, // determines the maximum length of the sequence to be generated by the model. 
    Temperature = 0.5, // controls the randomness of the model's outputs. 1 being more random, 0 being more deterministic
});

var kernelArgs = new KernelArguments{
    {"input", userInput}
};

var functionResult = await kernel.InvokeAsync(skFunction, kernelArgs);
var result = functionResult.GetValue<string>();

Console.WriteLine(result);